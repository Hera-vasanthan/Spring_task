import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';
import { LoginComponent } from './login.component';
import { RouterTestingModule } from '@angular/router/testing';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatIconModule } from '@angular/material/icon';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { NgToastService } from 'ng-angular-popup';
import { of } from 'rxjs';
import { By } from '@angular/platform-browser';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;
  let toastService: jasmine.SpyObj<NgToastService>;

  beforeEach(waitForAsync(() => {
    const toastServiceSpy = jasmine.createSpyObj('NgToastService', ['error', 'warning']);

    TestBed.configureTestingModule({
      declarations: [ LoginComponent ],
      imports: [
        RouterTestingModule,
        FormsModule,
        ReactiveFormsModule,
        MatFormFieldModule,
        MatInputModule,
        MatCheckboxModule,
        MatIconModule,
        MatCardModule,
        MatButtonModule,
        HttpClientTestingModule,
        BrowserAnimationsModule
      ],
      providers: [
        { provide: NgToastService, useValue: toastServiceSpy }
      ]
    }).compileComponents();

    toastService = TestBed.inject(NgToastService) as jasmine.SpyObj<NgToastService>;
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should display error message for invalid credentials', () => {
    const usernameInput = fixture.debugElement.query(By.css('input[formControlName="username"]')).nativeElement;
    const passwordInput = fixture.debugElement.query(By.css('input[formControlName="password"]')).nativeElement;
    const loginButton = fixture.debugElement.query(By.css('button[type="submit"]')).nativeElement;

    usernameInput.value = 'invalid_username';
    passwordInput.value = 'invalid_password';

    usernameInput.dispatchEvent(new Event('input'));
    passwordInput.dispatchEvent(new Event('input'));

    loginButton.click();

    expect(toastService.error).toHaveBeenCalledWith({ detail: 'Error!', summary: 'Login Failed! User Not Found', duration: 4000 });
  });

  // Add more test cases as needed for other scenarios, such as successful login, form validation, etc.
});
