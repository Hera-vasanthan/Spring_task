import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';
import { SignupComponent } from './signup.component';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { NgToastService } from 'ng-angular-popup';

describe('SignupComponent', () => {
  let component: SignupComponent;
  let fixture: ComponentFixture<SignupComponent>;
  let toastService: NgToastService;
  let httpMock: HttpTestingController;

  beforeEach(waitForAsync(() => {
    TestBed.configureTestingModule({
      declarations: [SignupComponent],
      imports: [ReactiveFormsModule, HttpClientTestingModule, RouterTestingModule],
      providers: [NgToastService]
    }).compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(SignupComponent);
    component = fixture.componentInstance;
    toastService = TestBed.inject(NgToastService);
    httpMock = TestBed.inject(HttpTestingController);
    fixture.detectChanges();
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize signupForm with required fields', () => {
    expect(component.signupForm).toBeDefined();
    expect(component.signupForm.controls['username']).toBeDefined();
    expect(component.signupForm.controls['email']).toBeDefined();
    expect(component.signupForm.controls['mobile']).toBeDefined();
    expect(component.signupForm.controls['password']).toBeDefined();
  });

  it('should display error messages for invalid form fields', () => {
    const usernameInput = component.signupForm.controls['username'];
    usernameInput.setValue('');
    expect(usernameInput.valid).toBeFalsy();

    const emailInput = component.signupForm.controls['email'];
    emailInput.setValue('');
    expect(emailInput.valid).toBeFalsy();

    const mobileInput = component.signupForm.controls['mobile'];
    mobileInput.setValue('');
    expect(mobileInput.valid).toBeFalsy();

    const passwordInput = component.signupForm.controls['password'];
    passwordInput.setValue('');
    expect(passwordInput.valid).toBeFalsy();

    // Verify error messages
    const compiled = fixture.nativeElement;
    expect(compiled.querySelector('.mat-form-field:first-child mat-error').textContent).toContain('Username Is Required');
    expect(compiled.querySelector('.mat-form-field:nth-child(2) mat-error').textContent).toContain('Email-Id Is Required');
    expect(compiled.querySelector('.mat-form-field:nth-child(3) mat-error').textContent).toContain('Mobile Number Is Required');
    expect(compiled.querySelector('.mat-form-field:nth-child(4) mat-error').textContent).toContain('Password Is Required');
  });

  it('should call signup service method on form submission', () => {
    const spyToastSuccess = spyOn(toastService, 'success');
    const mockUserData = { /* mock user data */ };
    component.signupForm.patchValue(mockUserData);
    component.signup();
    const req = httpMock.expectOne('http://localhost:8080/api/user/');
    expect(req.request.method).toBe('POST');
    req.flush({ /* mock response data */ });
    expect(spyToastSuccess).toHaveBeenCalled();
    expect(component.signupForm.value).toEqual({username: '', email: '', mobile: '', password: ''}); // Form should be reset
  });
});
